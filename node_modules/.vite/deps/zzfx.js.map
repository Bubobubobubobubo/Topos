{
  "version": 3,
  "sources": ["../../zzfx/ZzFX.js"],
  "sourcesContent": ["/*\r\n\r\nZzFX - Zuper Zmall Zound Zynth v1.2.0 by Frank Force\r\nhttps://github.com/KilledByAPixel/ZzFX\r\n\r\nZzFX Features\r\n\r\n- Tiny synth engine with 20 controllable parameters.\r\n- Play sounds via code, no need for sound assed files!\r\n- Compatible with most modern web browsers.\r\n- Small code footprint, the micro version is under 1 kilobyte.\r\n- Can produce a huge variety of sound effect types.\r\n- Sounds can be played with a short call. zzfx(...[,,,,.1,,,,9])\r\n- A small bit of randomness appied to sounds when played.\r\n- Use ZZFX.GetNote to get frequencies on a standard diatonic scale.\r\n- Sounds can be saved out as wav files for offline playback.\r\n- No additional libraries or dependencies are required.\r\n\r\n*/\r\n/*\r\n\r\n  ZzFX MIT License\r\n  \r\n  Copyright (c) 2019 - Frank Force\r\n  \r\n  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n  of this software and associated documentation files (the \"Software\"), to deal\r\n  in the Software without restriction, including without limitation the rights\r\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n  copies of the Software, and to permit persons to whom the Software is\r\n  furnished to do so, subject to the following conditions:\r\n  \r\n  The above copyright notice and this permission notice shall be included in all\r\n  copies or substantial portions of the Software.\r\n  \r\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n  SOFTWARE.\r\n  \r\n*/\r\n\r\n'use strict';\r\n\r\n// play a zzfx sound\r\nexport function zzfx(...parameters) { return ZZFX.play(...parameters) }\r\n\r\n// zzfx object with some extra functionalty\r\nexport const ZZFX =\r\n{\r\n    // master volume scale\r\n    volume: .3,\r\n    \r\n    // sample rate for audio\r\n    sampleRate: 44100,\r\n    \r\n    // create shared audio context\r\n    x: new AudioContext,\r\n\r\n    // play a sound from zzfx paramerters\r\n    play: function(...parameters)\r\n    {\r\n        // build samples and start sound\r\n        return this.playSamples(this.buildSamples(...parameters));\r\n    },\r\n\r\n    // play an array of samples\r\n    playSamples: function(...samples)\r\n    {\r\n        // create buffer and source\r\n        const buffer = this.x.createBuffer(samples.length, samples[0].length, this.sampleRate),\r\n            source = this.x.createBufferSource();\r\n\r\n        samples.map((d,i)=> buffer.getChannelData(i).set(d));\r\n        source.buffer = buffer;\r\n        source.connect(this.x.destination);\r\n        source.start();\r\n        return source;\r\n    },\r\n\r\n    // build an array of samples\r\n    buildSamples: function\r\n    (\r\n        volume = 1, \r\n        randomness = .05,\r\n        frequency = 220,\r\n        attack = 0,\r\n        sustain = 0,\r\n        release = .1,\r\n        shape = 0,\r\n        shapeCurve = 1,\r\n        slide = 0, \r\n        deltaSlide = 0, \r\n        pitchJump = 0, \r\n        pitchJumpTime = 0, \r\n        repeatTime = 0, \r\n        noise = 0,\r\n        modulation = 0,\r\n        bitCrush = 0,\r\n        delay = 0,\r\n        sustainVolume = 1,\r\n        decay = 0,\r\n        tremolo = 0\r\n    )\r\n    {\r\n        // init parameters\r\n        let PI2 = Math.PI*2, sampleRate = this.sampleRate, sign = v => v>0?1:-1,\r\n            startSlide = slide *= 500 * PI2 / sampleRate / sampleRate,\r\n            startFrequency = frequency *= (1 + randomness*2*Math.random() - randomness) * PI2 / sampleRate,\r\n            b=[], t=0, tm=0, i=0, j=1, r=0, c=0, s=0, f, length;\r\n\r\n        // scale by sample rate\r\n        attack = attack * sampleRate + 9; // minimum attack to prevent pop\r\n        decay *= sampleRate;\r\n        sustain *= sampleRate;\r\n        release *= sampleRate;\r\n        delay *= sampleRate;\r\n        deltaSlide *= 500 * PI2 / sampleRate**3;\r\n        modulation *= PI2 / sampleRate;\r\n        pitchJump *= PI2 / sampleRate;\r\n        pitchJumpTime *= sampleRate;\r\n        repeatTime = repeatTime * sampleRate | 0;\r\n\r\n        // generate waveform\r\n        for(length = attack + decay + sustain + release + delay | 0;\r\n            i < length; b[i++] = s)\r\n        {\r\n            if (!(++c%(bitCrush*100|0)))                      // bit crush\r\n            { \r\n                s = shape? shape>1? shape>2? shape>3?         // wave shape\r\n                    Math.sin((t%PI2)**3) :                    // 4 noise\r\n                    Math.max(Math.min(Math.tan(t),1),-1):     // 3 tan\r\n                    1-(2*t/PI2%2+2)%2:                        // 2 saw\r\n                    1-4*Math.abs(Math.round(t/PI2)-t/PI2):    // 1 triangle\r\n                    Math.sin(t);                              // 0 sin\r\n\r\n                s = (repeatTime ?\r\n                        1 - tremolo + tremolo*Math.sin(PI2*i/repeatTime) // tremolo\r\n                        : 1) *\r\n                    sign(s)*(Math.abs(s)**shapeCurve) *       // curve 0=square, 2=pointy\r\n                    volume * this.volume * (                  // envelope\r\n                    i < attack ? i/attack :                   // attack\r\n                    i < attack + decay ?                      // decay\r\n                    1-((i-attack)/decay)*(1-sustainVolume) :  // decay falloff\r\n                    i < attack  + decay + sustain ?           // sustain\r\n                    sustainVolume :                           // sustain volume\r\n                    i < length - delay ?                      // release\r\n                    (length - i - delay)/release *            // release falloff\r\n                    sustainVolume :                           // release volume\r\n                    0);                                       // post release\r\n\r\n                s = delay ? s/2 + (delay > i ? 0 :            // delay\r\n                    (i<length-delay? 1 : (length-i)/delay) *  // release delay \r\n                    b[i-delay|0]/2) : s;                      // sample delay\r\n            }\r\n\r\n            f = (frequency += slide += deltaSlide) *          // frequency\r\n                Math.cos(modulation*tm++);                    // modulation\r\n            t += f - f*noise*(1 - (Math.sin(i)+1)*1e9%2);     // noise\r\n\r\n            if (j && ++j > pitchJumpTime)          // pitch jump\r\n            {\r\n                frequency += pitchJump;            // apply pitch jump\r\n                startFrequency += pitchJump;       // also apply to start\r\n                j = 0;                             // stop pitch jump time\r\n            }\r\n\r\n            if (repeatTime && !(++r % repeatTime)) // repeat\r\n            {\r\n                frequency = startFrequency;        // reset frequency\r\n                slide = startSlide;                // reset slide\r\n                j ||= 1;                           // reset pitch jump time\r\n            }\r\n        }\r\n\r\n        return b;\r\n    },\r\n    \r\n    // get frequency of a musical note on a diatonic scale\r\n    getNote: function(semitoneOffset=0, rootNoteFrequency=440)\r\n    {\r\n        return rootNoteFrequency * 2**(semitoneOffset/12);\r\n    }\r\n\r\n} // ZZFX"],
  "mappings": "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",
  "names": []
}
