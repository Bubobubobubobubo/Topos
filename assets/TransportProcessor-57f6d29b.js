var d=Object.defineProperty;var n=(e,s,i)=>s in e?d(e,s,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[s]=i;var o=(e,s,i)=>(n(e,typeof s!="symbol"?s+"":s,i),i);(function(){"use strict";class e extends AudioWorkletProcessor{constructor(t){super(t);o(this,"handleMessage",t=>{t.data&&t.data.type==="ping"?this.port.postMessage(t.data):t.data==="start"?this.started=!0:t.data==="pause"?(this.started=!1,this.lastPausedTime===0&&(this.lastPausedTime=currentTime)):t.data==="stop"?(this.started=!1,this.totalPausedTime=0,this.lastPausedTime=0,this.wasStopped=!0,this.currentPulsePosition=0):t.data==="bpm"?this.bpm=t.data.value:t.data==="ppqn"&&(this.ppqn=t.data.value)});this.port.addEventListener("message",this.handleMessage),this.port.start(),this.started=!1,this.totalPausedTime=0,this.lastPausedTime=0,this.startedAgainTime=0,this.wasStopped=!1,this.bpm=120,this.ppqn=48,this.currentPulsePosition=0}process(t,p,l){if(this.started){if(this.lastPausedTime>0){const h=currentTime-this.lastPausedTime;this.totalPausedTime+=h,this.lastPausedTime=0}this.wasStopped&&(this.startedAgainTime=currentTime,this.wasStopped=!1);const a=currentTime-this.totalPausedTime-this.startedAgainTime,u=a/(60/this.bpm),r=Math.ceil(u*this.ppqn);r>this.currentPulsePosition&&(this.currentPulsePosition=r,this.port.postMessage({type:"bang",logicalTime:a}))}return!0}}registerProcessor("transport",e)})();
